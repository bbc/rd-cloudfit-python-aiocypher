@Library("rd-apmm-groovy-ci-library@v1.x") _

/*

    This file was autogenerated using tooling in commontooling

    DO NOT MANUALLY EDIT THIS FILE

    Instead make necessary changes to Jenkinsfile.json and then
    regenerate this file with `make Jenkinsfile` before checking
    the resulting file into git.

 */

pipeline {
    agent {
        label "ubuntu&&apmm-agent"
    }
    options {
        ansiColor('xterm') // Add support for coloured output
        buildDiscarder(logRotator(numToKeepStr: '10')) // Discard old builds
    }
    triggers {
        cron(env.BRANCH_NAME == 'master' ? 'H H(0-8) * * *' : '') // Build master some time every morning
    }
    parameters {
        booleanParam(name: "FORCE_ARTIFACTORYUPLOAD", defaultValue: false, description: "Force upload of python wheels to artifactory")
        string(name: "PYTHON_VERSION", defaultValue: "3.6", description: "Python version to make available in tox")
        string(name: "COMMONTOOLING_BRANCH", defaultValue: "master")
    }
    environment {
        FORGE_CERT = "/etc/pki/tls/private/client_crt_key.pem"
        http_proxy = "http://www-cache.rd.bbc.co.uk:8080"
        https_proxy = "http://www-cache.rd.bbc.co.uk:8080"
        PATH = "$HOME/.pyenv/bin:$PATH"
        TOX_WORK_DIR="/tmp/${sh(script: "basename ${WORKSPACE}", , returnStdout: true).trim()}"
        WITH_DOCKER = "true"
        TOX_ENV = "py${(params.PYTHON_VERSION =~ /(\d+)\.(\d+).*/)[0][1..2].join('')}"
        DOCKER_CONFIG = "$WORKSPACE/docker-config/"
    }
    stages {
        stage("Setup Environment") {
            steps {
                bbcStageSetupEnvironment()
            }
            post {
                always {
                    bbcGithubNotify(context: "prepcode", status: env.result)
                }
            }
        }
        stage ("make check-jenkinsfile") {
            steps {
                bbcMake 'check-jenkinsfile'
            }
            post {
                always {
                    bbcGithubNotify(context: "check-jenkinsfile", status: env.result)
                }
            }
        }
        stage ("make check-pr-template") {
            steps {
                bbcMake 'check-pr-template'
            }
            post {
                always {
                    bbcGithubNotify(context: "check-pr-template", status: env.result)
                }
            }
        }
        stage ("make lint") {
            steps {
                bbcMake 'lint'
            }
            post {
                always {
                    bbcGithubNotify(context: "lint", status: env.result)
                }
            }
        }
        stage ("make mypy") {
            steps {
                bbcMake 'mypy'
            }
            post {
                always {
                    bbcGithubNotify(context: "mypy", status: env.result)
                }
            }
        }
        stage ("make test") {
            steps {
                bbcMake 'test'
            }
            post {
                always {
                    bbcGithubNotify(context: "test", status: env.result)
                }
            }
        }
        stage ("make wheel") {
            steps {
                bbcMake 'wheel'
            }
            post {
                always {
                    bbcGithubNotify(context: "wheel", status: env.result)
                }
            }
        }
        stage ("Upload package to Artifactory") {
            when {
                anyOf {
                    expression { return params.FORCE_ARTIFACTORYUPLOAD }
                    expression { env.TAG_NAME != null }
                    expression {
                        bbcShouldUploadArtifacts(branches: ["master"])
                    }
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "171bbdf4-7ac0-4323-9d5c-a9fdc5317f45",
                        passwordVariable: 'TWINE_REPO_PASSWORD',
                        usernameVariable: 'TWINE_REPO_USERNAME')]) {
                    withEnv(["TWINE_REPO=https://artifactory-noforge.virt.ch.bbc.co.uk/artifactory/api/pypi/ap-python"]) {
                        bbcMake "upload-wheels"
                    }
                }
            }
            post {
                always {
                    bbcGithubNotify(context: "upload-wheels", status: env.result)
                }
            }
        }
    }
    post {
        always {
            bbcSlackNotify(channel: "#apmm-cloudfit")
        }
    }
}
